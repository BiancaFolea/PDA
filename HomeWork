#include <stdio.h>       
#include <mutex.h>          
#include <queue.h>          
#include <chrono.h>         

#include <stdlib.h>

#include <pthread.h>
#include <semaphore.h>

mutex mtx;
queue <int> q;


void producer()
{
	while (true)
		printf("Producem\n");
		int item = rand() % 10;
		this_thread::sleep_for(chrono::seconds(5));
		mtx.lock();
		if (q.size() < 10)
		{
			sem_wait(&semFree)
			q.push(item);
			sem_post(&semFull)
		}
	mtx.unlock();
}

void consumer()
{

	while (true)
		printf("Consumam\n");
		this_thread::sleep_for(chrono::seconds(5));
		mtx.lock();
		if (q.size() > 0)
		{
			sem_wait(&semF)
			q.pop();
			sem_post(&semFree)
		}
	mtx.unlock();
}


int main()
{
	sem_init(&semFree,0,10);
    sem_init(&semFull,0,0);
	
	thread th1(producer);
	thread th2(consumer);

	th1.join();
	th2.join();

	return 0;
}



